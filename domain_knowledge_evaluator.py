# ‡πÑ‡∏ü‡∏•‡πå: domain_knowledge_evaluator.py
# Path: domain_knowledge_evaluator.py (‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏´‡∏°‡πà‡πÉ‡∏ô root directory)
# ‡∏ß‡∏±‡∏ï‡∏ñ‡∏∏‡∏õ‡∏£‡∏∞‡∏™‡∏á‡∏Ñ‡πå: ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏°‡πÄ‡∏´‡∏ï‡∏∏‡∏™‡∏°‡∏ú‡∏•‡∏Ç‡∏≠‡∏á Feature Selection

"""
Domain Knowledge Evaluator - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤ Feature Selection ‡∏™‡∏°‡πÄ‡∏´‡∏ï‡∏∏‡∏™‡∏°‡∏ú‡∏•‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏Ç‡∏≠‡∏á‡∏ô‡∏±‡∏Å‡∏ß‡∏¥‡∏ä‡∏≤‡∏Å‡∏≤‡∏£
"""

import pandas as pd
import numpy as np
import json
from typing import Dict, List, Tuple
import matplotlib.pyplot as plt
import seaborn as sns
from pathlib import Path

class DomainKnowledgeEvaluator:
    """‡∏Ñ‡∏•‡∏≤‡∏™‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏°‡πÄ‡∏´‡∏ï‡∏∏‡∏™‡∏°‡∏ú‡∏•‡∏Ç‡∏≠‡∏á Feature Selection"""
    
    def __init__(self):
        # Define feature categories based on education domain knowledge
        self.feature_categories = {
            'Academic_Scores': [
                '‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ñ‡∏ì‡∏¥‡∏ï‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå', '‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå', '‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢', 
                '‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå', '‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏®‡∏¥‡∏•‡∏õ‡∏∞'
            ],
            'Core_Skills': [
                '‡∏ó‡∏±‡∏Å‡∏©‡∏∞‡∏Å‡∏≤‡∏£‡∏Ñ‡∏¥‡∏î‡πÄ‡∏ä‡∏¥‡∏á‡∏ï‡∏£‡∏£‡∏Å‡∏∞', '‡∏ó‡∏±‡∏Å‡∏©‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏£‡∏Ñ‡πå', '‡∏ó‡∏±‡∏Å‡∏©‡∏∞‡∏Å‡∏≤‡∏£‡πÅ‡∏Å‡πâ‡∏õ‡∏±‡∏ç‡∏´‡∏≤'
            ],
            'Career_Interests': [
                '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ô‡πÉ‡∏à‡∏î‡πâ‡∏≤‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç', '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ô‡πÉ‡∏à‡∏î‡πâ‡∏≤‡∏ô‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ', '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ô‡πÉ‡∏à‡∏î‡πâ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏≠‡∏≤‡∏´‡∏≤‡∏£'
            ],
            'Demographics': [
                '‡∏≠‡∏≤‡∏¢‡∏∏', '‡πÄ‡∏û‡∏®', '‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß', '‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á', '‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡∏û‡∏µ‡πà‡∏ô‡πâ‡∏≠‡∏á'
            ],
            'Lifestyle_Personal': [
                '‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡∏Å‡∏≤‡∏£‡∏ô‡∏≠‡∏ô', '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢', '‡∏ä‡∏±‡πà‡∏ß‡πÇ‡∏°‡∏á‡πÉ‡∏ä‡πâ‡πÇ‡∏ã‡πÄ‡∏ä‡∏µ‡∏¢‡∏•‡∏°‡∏µ‡πÄ‡∏î‡∏µ‡∏¢',
                '‡∏ä‡∏≠‡∏ö‡∏≠‡πà‡∏≤‡∏ô‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠', '‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡πÄ‡∏û‡∏•‡∏á‡∏ó‡∏µ‡πà‡∏ä‡∏≠‡∏ö'
            ]
        }
        
        # Educational justification for each category
        self.category_justifications = {
            'Academic_Scores': {
                'relevance': 'HIGH',
                'justification': '‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ß‡∏¥‡∏ä‡∏≤‡∏´‡∏•‡∏±‡∏Å‡πÅ‡∏™‡∏î‡∏á‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏ô‡∏±‡∏î‡πÉ‡∏ô‡∏™‡∏≤‡∏Ç‡∏≤‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡∏Ñ‡∏ß‡∏£‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡∏´‡∏•‡∏±‡∏Å‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏ú‡∏ô‡∏Å',
                'expected_percentage': '40-60%',
                'research_support': 'Supported by educational psychology research on academic aptitude'
            },
            'Core_Skills': {
                'relevance': 'HIGH',
                'justification': '‡∏ó‡∏±‡∏Å‡∏©‡∏∞‡∏Å‡∏≤‡∏£‡∏Ñ‡∏¥‡∏î‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ ‡πÅ‡∏ï‡πà‡∏•‡∏∞‡πÅ‡∏ú‡∏ô‡∏Å‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏ó‡∏±‡∏Å‡∏©‡∏∞‡∏ó‡∏µ‡πà‡πÅ‡∏ï‡∏Å‡∏ï‡πà‡∏≤‡∏á‡∏Å‡∏±‡∏ô',
                'expected_percentage': '15-25%',
                'research_support': 'Cognitive skills are strong predictors of academic success'
            },
            'Career_Interests': {
                'relevance': 'HIGH',
                'justification': '‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ô‡πÉ‡∏à‡∏î‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏ä‡∏µ‡∏û‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡∏ö‡πà‡∏á‡∏ä‡∏µ‡πâ‡πÅ‡∏£‡∏á‡∏à‡∏π‡∏á‡πÉ‡∏à‡πÅ‡∏•‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ï‡∏±‡πâ‡∏á‡πÉ‡∏à‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô',
                'expected_percentage': '15-25%',
                'research_support': 'Vocational interest theory supports this factor'
            },
            'Demographics': {
                'relevance': 'LOW',
                'justification': '‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏Å‡∏£‡∏≠‡∏≤‡∏à‡∏°‡∏µ‡∏ú‡∏•‡∏ï‡πà‡∏≠‡πÇ‡∏≠‡∏Å‡∏≤‡∏™‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤ ‡πÅ‡∏ï‡πà‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£‡πÄ‡∏õ‡πá‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏´‡∏•‡∏±‡∏Å',
                'expected_percentage': '0-10%',
                'research_support': 'Should be minimized to ensure educational equity'
            },
            'Lifestyle_Personal': {
                'relevance': 'NONE',
                'justification': '‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏ä‡πà‡∏ô ‡∏Å‡∏≤‡∏£‡∏ô‡∏≠‡∏ô ‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢ ‡πÑ‡∏°‡πà‡∏Ñ‡∏ß‡∏£‡πÉ‡∏ä‡πâ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤',
                'expected_percentage': '0%',
                'research_support': 'Personal lifestyle should not determine educational opportunities'
            }
        }
    
    def evaluate_feature_selection(self, selected_features: List[str]) -> Dict:
        """‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏°‡πÄ‡∏´‡∏ï‡∏∏‡∏™‡∏°‡∏ú‡∏•‡∏Ç‡∏≠‡∏á feature selection"""
        
        evaluation = {
            'total_features': len(selected_features),
            'category_analysis': {},
            'red_flags': [],
            'recommendations': [],
            'overall_score': 0,
            'academic_justification': ""
        }
        
        # ‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
        for category, features in self.feature_categories.items():
            selected_in_category = [f for f in selected_features if f in features]
            percentage = len(selected_in_category) / len(selected_features) * 100 if len(selected_features) > 0 else 0
            
            analysis = {
                'features_selected': selected_in_category,
                'count': len(selected_in_category),
                'percentage': percentage,
                'justification': self.category_justifications[category],
                'status': self._evaluate_category_status(category, percentage)
            }
            
            evaluation['category_analysis'][category] = analysis
            
            # ‡∏ï‡∏£‡∏ß‡∏à‡∏´‡∏≤ red flags
            if category == 'Lifestyle_Personal' and len(selected_in_category) > 0:
                evaluation['red_flags'].append({
                    'type': 'LIFESTYLE_FACTORS_PRESENT',
                    'message': f"üö® ‡∏û‡∏ö‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡πÑ‡∏•‡∏ü‡πå‡∏™‡πÑ‡∏ï‡∏•‡πå: {selected_in_category}",
                    'severity': 'HIGH',
                    'academic_concern': '‡∏ô‡∏±‡∏Å‡∏ß‡∏¥‡∏ä‡∏≤‡∏Å‡∏≤‡∏£‡∏à‡∏∞‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏ß‡πà‡∏≤‡∏ó‡∏≥‡πÑ‡∏°‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏Ç‡πâ‡∏≤‡∏°‡∏≤‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡∏î‡∏™‡∏¥‡∏ô‡πÉ‡∏à‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤'
                })
            
            if category == 'Demographics' and percentage > 15:
                evaluation['red_flags'].append({
                    'type': 'HIGH_DEMOGRAPHIC_BIAS',
                    'message': f"‚ö†Ô∏è ‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏Å‡∏£‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå‡∏™‡∏π‡∏á‡πÄ‡∏Å‡∏¥‡∏ô‡πÑ‡∏õ: {percentage:.1f}%",
                    'severity': 'MEDIUM',
                    'academic_concern': '‡∏≠‡∏≤‡∏à‡∏ñ‡∏π‡∏Å‡∏°‡∏≠‡∏á‡∏ß‡πà‡∏≤‡πÄ‡∏õ‡πá‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥‡∏ó‡∏≤‡∏á‡∏™‡∏±‡∏á‡∏Ñ‡∏°'
                })
        
        # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏ß‡∏°
        evaluation['overall_score'] = self._calculate_overall_score(evaluation['category_analysis'])
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥
        evaluation['recommendations'] = self._generate_recommendations(evaluation)
        
        # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏ó‡∏≤‡∏á‡∏ß‡∏¥‡∏ä‡∏≤‡∏Å‡∏≤‡∏£
        evaluation['academic_justification'] = self._generate_academic_justification(evaluation)
        
        return evaluation
    
    def _evaluate_category_status(self, category: str, percentage: float) -> str:
        """‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ç‡∏≠‡∏á‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà"""
        if category in ['Academic_Scores', 'Core_Skills', 'Career_Interests']:
            if percentage >= 15:
                return 'GOOD'
            elif percentage >= 10:
                return 'ACCEPTABLE'
            else:
                return 'TOO_LOW'
        
        elif category == 'Demographics':
            if percentage <= 10:
                return 'GOOD'
            elif percentage <= 20:
                return 'ACCEPTABLE'
            else:
                return 'TOO_HIGH'
        
        elif category == 'Lifestyle_Personal':
            if percentage == 0:
                return 'GOOD'
            else:
                return 'UNACCEPTABLE'
        
        return 'UNKNOWN'
    
    def _calculate_overall_score(self, category_analysis: Dict) -> float:
        """‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏£‡∏ß‡∏° (0-100)"""
        score = 0
        
        # Academic factors (‡πÉ‡∏´‡πâ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏™‡∏π‡∏á)
        academic_pct = category_analysis['Academic_Scores']['percentage']
        skills_pct = category_analysis['Core_Skills']['percentage']
        interests_pct = category_analysis['Career_Interests']['percentage']
        
        # ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏à‡∏≤‡∏Å‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤ (70 ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô)
        academic_score = min(academic_pct / 50 * 30, 30)  # ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 30 ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
        skills_score = min(skills_pct / 25 * 20, 20)      # ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 20 ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
        interests_score = min(interests_pct / 25 * 20, 20) # ‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 20 ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
        
        # ‡∏´‡∏±‡∏Å‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏à‡∏≤‡∏Å‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡∏ó‡∏µ‡πà‡πÑ‡∏°‡πà‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏™‡∏° (30 ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô)
        demo_pct = category_analysis['Demographics']['percentage']
        lifestyle_pct = category_analysis['Lifestyle_Personal']['percentage']
        
        demo_penalty = max(0, (demo_pct - 10) / 10 * 15)    # ‡∏´‡∏±‡∏Å‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 15 ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
        lifestyle_penalty = lifestyle_pct / 10 * 15         # ‡∏´‡∏±‡∏Å‡∏™‡∏π‡∏á‡∏™‡∏∏‡∏î 15 ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô
        
        score = academic_score + skills_score + interests_score + 30 - demo_penalty - lifestyle_penalty
        
        return max(0, min(100, score))
    
    def _generate_recommendations(self, evaluation: Dict) -> List[str]:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏±‡∏ö‡∏õ‡∏£‡∏∏‡∏á"""
        recommendations = []
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö red flags
        for flag in evaluation['red_flags']:
            if flag['type'] == 'LIFESTYLE_FACTORS_PRESENT':
                recommendations.append(
                    "üö® ‡∏•‡∏ö‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡πÑ‡∏•‡∏ü‡πå‡∏™‡πÑ‡∏ï‡∏•‡πå‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å feature selection - ‡πÉ‡∏ä‡πâ domain knowledge filtering"
                )
            elif flag['type'] == 'HIGH_DEMOGRAPHIC_BIAS':
                recommendations.append(
                    "‚ö†Ô∏è ‡∏•‡∏î‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡∏õ‡∏£‡∏∞‡∏ä‡∏≤‡∏Å‡∏£‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå - ‡∏à‡∏≥‡∏Å‡∏±‡∏î‡πÉ‡∏´‡πâ‡πÄ‡∏´‡∏•‡∏∑‡∏≠‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡∏∞‡πÄ‡∏û‡∏®"
                )
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏±‡∏î‡∏™‡πà‡∏ß‡∏ô‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà
        category_analysis = evaluation['category_analysis']
        
        if category_analysis['Academic_Scores']['percentage'] < 40:
            recommendations.append(
                "üìö ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ß‡∏¥‡∏ä‡∏≤‡∏´‡∏•‡∏±‡∏Å - ‡∏Ñ‡∏ß‡∏£‡∏°‡∏µ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 40% ‡∏Ç‡∏≠‡∏á selected features"
            )
        
        if category_analysis['Core_Skills']['percentage'] < 15:
            recommendations.append(
                "üß† ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡∏ó‡∏±‡∏Å‡∏©‡∏∞‡∏Å‡∏≤‡∏£‡∏Ñ‡∏¥‡∏î - ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ï‡πà‡∏≠‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ"
            )
        
        if category_analysis['Career_Interests']['percentage'] < 15:
            recommendations.append(
                "üéØ ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ô‡πÉ‡∏à‡∏î‡πâ‡∏≤‡∏ô‡∏≠‡∏≤‡∏ä‡∏µ‡∏û - ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç‡∏ï‡πà‡∏≠‡πÅ‡∏£‡∏á‡∏à‡∏π‡∏á‡πÉ‡∏à"
            )
        
        # ‡∏Ñ‡∏≥‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡πÄ‡∏ä‡∏¥‡∏á‡πÄ‡∏ó‡∏Ñ‡∏ô‡∏¥‡∏Ñ
        if evaluation['overall_score'] < 70:
            recommendations.append(
                "üîß ‡πÉ‡∏ä‡πâ Enhanced Sequential Selection with Domain Knowledge Filtering"
            )
            recommendations.append(
                "üìä ‡∏õ‡∏£‡∏±‡∏ö‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏Ç‡∏≠‡∏á Feature Selection Algorithm"
            )
        
        return recommendations
    
    def _generate_academic_justification(self, evaluation: Dict) -> str:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏ó‡∏≤‡∏á‡∏ß‡∏¥‡∏ä‡∏≤‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏≤‡∏£‡∏ô‡∏≥‡πÄ‡∏™‡∏ô‡∏≠"""
        
        academic_pct = evaluation['category_analysis']['Academic_Scores']['percentage']
        skills_pct = evaluation['category_analysis']['Core_Skills']['percentage']
        interests_pct = evaluation['category_analysis']['Career_Interests']['percentage']
        demo_pct = evaluation['category_analysis']['Demographics']['percentage']
        lifestyle_pct = evaluation['category_analysis']['Lifestyle_Personal']['percentage']
        
        total_educational = academic_pct + skills_pct + interests_pct
        total_personal = demo_pct + lifestyle_pct
        
        justification = f"""
üéì **‡πÄ‡∏´‡∏ï‡∏∏‡∏ú‡∏•‡∏ó‡∏≤‡∏á‡∏ß‡∏¥‡∏ä‡∏≤‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Feature Selection**

üìä **‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏ß‡∏¥‡πÄ‡∏Ñ‡∏£‡∏≤‡∏∞‡∏´‡πå:**
- ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ñ‡∏∏‡∏ì‡∏†‡∏≤‡∏û‡πÇ‡∏î‡∏¢‡∏£‡∏ß‡∏°: {evaluation['overall_score']:.1f}/100
- ‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤: {total_educational:.1f}%
- ‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß: {total_personal:.1f}%

üìö **‡∏´‡∏•‡∏±‡∏Å‡∏Å‡∏≤‡∏£‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤:**
1. **Academic Achievement Theory**: ‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ß‡∏¥‡∏ä‡∏≤‡∏´‡∏•‡∏±‡∏Å‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡∏ó‡∏≥‡∏ô‡∏≤‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à‡πÉ‡∏ô‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏™‡∏≤‡∏Ç‡∏≤
2. **Cognitive Skills Framework**: ‡∏ó‡∏±‡∏Å‡∏©‡∏∞‡∏Å‡∏≤‡∏£‡∏Ñ‡∏¥‡∏î‡πÄ‡∏õ‡πá‡∏ô‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ
3. **Vocational Interest Theory**: ‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ô‡πÉ‡∏à‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡∏±‡∏ß‡∏Ç‡∏±‡∏ö‡πÄ‡∏Ñ‡∏•‡∏∑‡πà‡∏≠‡∏ô‡πÅ‡∏£‡∏á‡∏à‡∏π‡∏á‡πÉ‡∏à
4. **Educational Equity Principle**: ‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡∏ó‡∏µ‡πà‡∏≠‡∏≤‡∏à‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏è‡∏¥‡∏ö‡∏±‡∏ï‡∏¥

üéØ **‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡∏¢‡∏∏‡∏Å‡∏ï‡πå‡πÉ‡∏ä‡πâ:**
- ‡πÄ‡∏ô‡πâ‡∏ô‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡∏ó‡∏µ‡πà‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏û‡∏±‡∏í‡∏ô‡∏≤‡πÑ‡∏î‡πâ (‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô, ‡∏ó‡∏±‡∏Å‡∏©‡∏∞)
- ‡∏´‡∏•‡∏µ‡∏Å‡πÄ‡∏•‡∏µ‡πà‡∏¢‡∏á‡∏õ‡∏±‡∏à‡∏à‡∏±‡∏¢‡∏ó‡∏µ‡πà‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏Ñ‡∏ß‡∏ö‡∏Ñ‡∏∏‡∏°‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ (‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß, ‡πÑ‡∏•‡∏ü‡πå‡∏™‡πÑ‡∏ï‡∏•‡πå)
- ‡∏™‡∏ô‡∏±‡∏ö‡∏™‡∏ô‡∏∏‡∏ô‡∏´‡∏•‡∏±‡∏Å‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ó‡πà‡∏≤‡πÄ‡∏ó‡∏µ‡∏¢‡∏°‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤

‚öñÔ∏è **‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ä‡∏≠‡∏ö‡∏ò‡∏£‡∏£‡∏°:**
‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å features ‡∏ï‡∏≤‡∏°‡∏´‡∏•‡∏±‡∏Å‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏à‡∏≤‡∏Å‡∏ô‡∏±‡∏Å‡∏ß‡∏¥‡∏ä‡∏≤‡∏Å‡∏≤‡∏£
‡πÅ‡∏•‡∏∞‡∏™‡∏≠‡∏î‡∏Ñ‡∏•‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ö‡∏à‡∏£‡∏¥‡∏¢‡∏ò‡∏£‡∏£‡∏°‡∏ó‡∏≤‡∏á‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤
        """
        
        return justification.strip()
    
    def create_evaluation_visualization(self, evaluation: Dict) -> plt.Figure:
        """‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô"""
        
        fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(16, 12))
        
        # 1. Category Distribution
        categories = list(evaluation['category_analysis'].keys())
        percentages = [evaluation['category_analysis'][cat]['percentage'] for cat in categories]
        colors = ['green', 'lightgreen', 'yellow', 'orange', 'red']
        
        # ‡∏Å‡∏£‡∏≠‡∏á‡∏≠‡∏≠‡∏Å‡∏´‡∏°‡∏ß‡∏î‡∏´‡∏°‡∏π‡πà‡∏ó‡∏µ‡πà‡πÄ‡∏õ‡πá‡∏ô 0%
        non_zero_data = [(cat, pct, colors[i]) for i, (cat, pct) in enumerate(zip(categories, percentages)) if pct > 0]
        if non_zero_data:
            cats, pcts, cols = zip(*non_zero_data)
            ax1.pie(pcts, labels=cats, autopct='%1.1f%%', colors=cols)
        else:
            ax1.text(0.5, 0.5, 'No Features Selected', ha='center', va='center')
        ax1.set_title('Feature Distribution by Category')
        
        # 2. Category Status
        statuses = [evaluation['category_analysis'][cat]['status'] for cat in categories]
        status_colors = {'GOOD': 'green', 'ACCEPTABLE': 'yellow', 'TOO_LOW': 'orange', 
                        'TOO_HIGH': 'red', 'UNACCEPTABLE': 'darkred'}
        bar_colors = [status_colors.get(status, 'gray') for status in statuses]
        
        ax2.bar(range(len(categories)), percentages, color=bar_colors, alpha=0.7)
        ax2.set_xticks(range(len(categories)))
        ax2.set_xticklabels([cat.replace('_', '\n') for cat in categories], rotation=0, ha='center')
        ax2.set_ylabel('Percentage')
        ax2.set_title('Category Status Evaluation')
        
        # 3. Overall Score Gauge
        score = evaluation['overall_score']
        color = 'green' if score >= 80 else 'yellow' if score >= 60 else 'red'
        ax3.pie([score, 100-score], labels=['Score', 'Remaining'], autopct='%1.1f%%',
               colors=[color, 'lightgray'])
        ax3.set_title(f'Overall Quality Score: {score:.1f}/100')
        
        # 4. Red Flags Summary
        red_flag_counts = {}
        for flag in evaluation['red_flags']:
            severity = flag['severity']
            red_flag_counts[severity] = red_flag_counts.get(severity, 0) + 1
        
        if red_flag_counts:
            severities = list(red_flag_counts.keys())
            counts = list(red_flag_counts.values())
            severity_colors = {'HIGH': 'red', 'MEDIUM': 'orange', 'LOW': 'yellow'}
            colors = [severity_colors.get(s, 'gray') for s in severities]
            
            ax4.bar(severities, counts, color=colors)
            ax4.set_title('Red Flags by Severity')
            ax4.set_ylabel('Count')
        else:
            ax4.text(0.5, 0.5, 'No Red Flags Found\n‚úÖ Good!', 
                    ha='center', va='center', transform=ax4.transAxes,
                    fontsize=16, color='green', fontweight='bold')
            ax4.set_title('Red Flags Summary')
        
        plt.tight_layout()
        return fig

def evaluate_current_selection():
    """‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô feature selection ‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô"""
    
    print("üîç DOMAIN KNOWLEDGE EVALUATION")
    print("=" * 50)
    
    # ‡∏•‡∏≠‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏à‡∏≤‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
    result_path = Path("result/feature_selection/selected_features.json")
    
    if result_path.exists():
        print("üìÅ Loading features from result file...")
        with open(result_path, 'r', encoding='utf-8') as f:
            data = json.load(f)
            current_selection = data.get('selected_features', [])
    else:
        print("üìÑ Using example from report...")
        # Features ‡∏ó‡∏µ‡πà‡∏ñ‡∏π‡∏Å‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô (‡∏à‡∏≤‡∏Å‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á)
        current_selection = [
            "‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ñ‡∏ì‡∏¥‡∏ï‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå", "‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå", "‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢",
            "‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå", "‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏®‡∏¥‡∏•‡∏õ‡∏∞", "‡∏ó‡∏±‡∏Å‡∏©‡∏∞‡∏Å‡∏≤‡∏£‡∏Ñ‡∏¥‡∏î‡πÄ‡∏ä‡∏¥‡∏á‡∏ï‡∏£‡∏£‡∏Å‡∏∞",
            "‡∏ó‡∏±‡∏Å‡∏©‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏£‡∏Ñ‡πå", "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ô‡πÉ‡∏à‡∏î‡πâ‡∏≤‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç",
            "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ô‡πÉ‡∏à‡∏î‡πâ‡∏≤‡∏ô‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ", "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ô‡πÉ‡∏à‡∏î‡πâ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏≠‡∏≤‡∏´‡∏≤‡∏£",
            "‡πÄ‡∏û‡∏®", "‡∏£‡∏≤‡∏¢‡πÑ‡∏î‡πâ‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏£‡∏±‡∏ß", "‡∏Å‡∏≤‡∏£‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡∏õ‡∏Å‡∏Ñ‡∏£‡∏≠‡∏á",
            "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏ñ‡∏µ‡πà‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡∏Å‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Å‡∏≤‡∏¢", "‡∏ä‡∏≠‡∏ö‡∏≠‡πà‡∏≤‡∏ô‡∏´‡∏ô‡∏±‡∏á‡∏™‡∏∑‡∏≠"  # üö® ‡∏õ‡∏±‡∏ç‡∏´‡∏≤‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ!
        ]
    
    print(f"üìä Analyzing {len(current_selection)} selected features...")
    
    evaluator = DomainKnowledgeEvaluator()
    evaluation = evaluator.evaluate_feature_selection(current_selection)
    
    print(f"\nüìà Overall Score: {evaluation['overall_score']:.1f}/100")
    print(f"üö© Red Flags: {len(evaluation['red_flags'])}")
    
    print("\nüö® RED FLAGS:")
    if evaluation['red_flags']:
        for flag in evaluation['red_flags']:
            print(f"   {flag['message']}")
            print(f"      Severity: {flag['severity']}")
            print(f"      Concern: {flag['academic_concern']}")
    else:
        print("   ‚úÖ No red flags found!")
    
    print("\nüí° RECOMMENDATIONS:")
    for rec in evaluation['recommendations']:
        print(f"   {rec}")
    
    print("\nüìã CATEGORY BREAKDOWN:")
    for category, analysis in evaluation['category_analysis'].items():
        status_emoji = {
            'GOOD': '‚úÖ', 'ACCEPTABLE': '‚ö†Ô∏è', 'TOO_LOW': '‚ùå', 
            'TOO_HIGH': 'üö´', 'UNACCEPTABLE': 'üö®'
        }
        emoji = status_emoji.get(analysis['status'], '‚ùì')
        print(f"   {emoji} {category}: {analysis['percentage']:.1f}% ({analysis['count']} features)")
        if analysis['features_selected']:
            print(f"      Features: {analysis['features_selected']}")
    
    print(evaluation['academic_justification'])
    
    # ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Å‡∏£‡∏≤‡∏ü
    try:
        fig = evaluator.create_evaluation_visualization(evaluation)
        fig.savefig("domain_knowledge_evaluation.png", dpi=300, bbox_inches='tight')
        print(f"\nüìä Visualization saved: domain_knowledge_evaluation.png")
        plt.close(fig)
    except Exception as e:
        print(f"\n‚ö†Ô∏è Could not create visualization: {e}")
    
    return evaluation

def test_enhanced_selection():
    """‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà‡∏Ñ‡∏ß‡∏£‡∏à‡∏∞‡πÑ‡∏î‡πâ‡∏´‡∏•‡∏±‡∏á‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç"""
    
    print("\n" + "="*50)
    print("üß™ TESTING ENHANCED SELECTION RESULTS")
    print("="*50)
    
    # ‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î‡∏´‡∏ß‡∏±‡∏á‡∏´‡∏•‡∏±‡∏á‡πÉ‡∏ä‡πâ enhanced method
    enhanced_selection = [
        # Core Academic (5/12 = 41.7%)
        "‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ñ‡∏ì‡∏¥‡∏ï‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå", "‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå", "‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢",
        "‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå", "‡∏Ñ‡∏∞‡πÅ‡∏ô‡∏ô‡∏®‡∏¥‡∏•‡∏õ‡∏∞",
        
        # Core Skills (2/12 = 16.7%)
        "‡∏ó‡∏±‡∏Å‡∏©‡∏∞‡∏Å‡∏≤‡∏£‡∏Ñ‡∏¥‡∏î‡πÄ‡∏ä‡∏¥‡∏á‡∏ï‡∏£‡∏£‡∏Å‡∏∞", "‡∏ó‡∏±‡∏Å‡∏©‡∏∞‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏¥‡∏î‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏£‡∏£‡∏Ñ‡πå",
        
        # Core Interests (3/12 = 25%)
        "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ô‡πÉ‡∏à‡∏î‡πâ‡∏≤‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç", "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ô‡πÉ‡∏à‡∏î‡πâ‡∏≤‡∏ô‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ", "‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏ô‡πÉ‡∏à‡∏î‡πâ‡∏≤‡∏ô‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏≠‡∏≤‡∏´‡∏≤‡∏£",
        
        # Demographics - ‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥ (2/12 = 16.7%)
        "‡∏≠‡∏≤‡∏¢‡∏∏", "‡πÄ‡∏û‡∏®"
        
        # ‡πÑ‡∏°‡πà‡∏°‡∏µ Lifestyle ‡∏´‡∏£‡∏∑‡∏≠ Socioeconomic factors!
    ]
    
    evaluator = DomainKnowledgeEvaluator()
    evaluation = evaluator.evaluate_feature_selection(enhanced_selection)
    
    print(f"üéØ Enhanced Selection Score: {evaluation['overall_score']:.1f}/100")
    print(f"üö© Red Flags: {len(evaluation['red_flags'])}")
    
    print("\nüìä Enhanced Category Breakdown:")
    for category, analysis in evaluation['category_analysis'].items():
        print(f"   {category}: {analysis['percentage']:.1f}% ({analysis['count']} features)")
    
    if evaluation['overall_score'] >= 80:
        print("\n‚úÖ ENHANCED SELECTION PASSES ACADEMIC STANDARDS!")
    else:
        print(f"\n‚ùå Still needs improvement (score: {evaluation['overall_score']:.1f}/100)")
    
    return evaluation

if __name__ == "__main__":
    # ‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏õ‡∏±‡∏à‡∏à‡∏∏‡∏ö‡∏±‡∏ô
    current_eval = evaluate_current_selection()
    
    # ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏ó‡∏µ‡πà‡∏Ñ‡∏≤‡∏î‡∏´‡∏ß‡∏±‡∏á
    enhanced_eval = test_enhanced_selection()
    
    print(f"\n" + "="*50)
    print("üìà COMPARISON SUMMARY")
    print("="*50)
    print(f"Current Score:  {current_eval['overall_score']:.1f}/100")
    print(f"Enhanced Score: {enhanced_eval['overall_score']:.1f}/100")
    print(f"Improvement:    {enhanced_eval['overall_score'] - current_eval['overall_score']:.1f} points")
    
    if enhanced_eval['overall_score'] >= 80:
        print("üéâ Ready for academic presentation!")
    else:
        print("üîß Still needs domain knowledge refinement")